import React, { createContext, useState, useEffect, useCallback, useRef } from 'react';
import en from '../locales/en.json';
import ru from '../locales/ru.json';
import kk from '../locales/kk.json';
import { habitService } from '../services/habits';

const translations = { en, ru, kk };
const SUPPORTED = ['en', 'ru', 'kk'];

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞ —è–∑—ã–∫–∞ (ru-RU -> ru, en_US -> en, kz -> kk)
function normalizeLang(input) {
  if (!input || typeof input !== 'string') return 'en';
  const lang = input.toLowerCase().replace('_', '-'); // en_US -> en-US
  if (lang === 'kz' || lang.startsWith('kz-')) return 'kk';
  if (lang === 'kk' || lang.startsWith('kk-')) return 'kk';
  if (lang === 'ru' || lang.startsWith('ru-')) return 'ru';
  if (lang === 'en' || lang.startsWith('en-')) return 'en';
  // –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî en
  return 'en';
}

export const LanguageContext = createContext({
  language: 'en',
  setLanguage: async () => {},
  t: () => '',
  availableLanguages: SUPPORTED,
  initializeLanguage: () => {},
  isLoading: true,
  isInitialized: false,
  isChanging: false,
});

export const LanguageProvider = ({ children }) => {
  const [language, setLanguageState] = useState('en');
  const [isChanging, setIsChanging] = useState(false);
  const [isInitialized, setIsInitialized] = useState(false);
  const [isLoading, setIsLoading] = useState(true);

  // –ß—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –¥–≤–æ–π–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ auth –≤–Ω–µ–∑–∞–ø–Ω–æ –≤—ã–∑–æ–≤–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ)
  const initCalledRef = useRef(false);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ –ë–î (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ App.jsx –ø–æ—Å–ª–µ auth)
  const initializeLanguage = useCallback((userLanguage) => {
    if (initCalledRef.current) {
      // –£–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
      return;
    }
    initCalledRef.current = true;

    const normalized = normalizeLang(userLanguage);
    const finalLang = SUPPORTED.includes(normalized) ? normalized : 'en';

    console.log('üåç LanguageContext: initializeLanguage ->', userLanguage, '=>', finalLang);

    setLanguageState(finalLang);
    setIsInitialized(true);
    setIsLoading(false);
  }, []);

  // –ù–µ –≥—Ä—É–∑–∏–º –Ω–∏—á–µ–≥–æ —Å–∞–º–∏ ‚Äî –∂–¥—ë–º initializeLanguage –∏–∑ App –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (!isInitialized) {
      // –æ—Å—Ç–∞—ë–º—Å—è –≤ isLoading=true, –ø–æ–∫–∞ App –Ω–µ –¥–µ—Ä–Ω—ë—Ç initializeLanguage
      // –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç—å—Å—è –∑–∞—â–∏—Ç–Ω—ã–º —Ç–∞–π–º–µ—Ä–æ–º, –Ω–æ –æ—Å—Ç–∞–≤–∏–º —á–∏—Å—Ç–æ
      return;
    }
    setIsLoading(false);
  }, [isInitialized]);

  // –ü–µ—Ä–µ–≤–æ–¥—ã
  const t = useCallback((key, params = {}) => {
    const keys = key.split('.');
    let bundle = translations[language] || translations.en;

    // –ü–æ —Ü–µ–ø–æ—á–∫–µ –¥–æ—Å—Ç–∞—ë–º –∫–ª—é—á
    for (const k of keys) {
      if (bundle && typeof bundle === 'object' && k in bundle) {
        bundle = bundle[k];
      } else {
        // –§–æ–ª–ª–±–µ–∫ –∫ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É
        bundle = translations.en;
        for (const fk of keys) {
          if (bundle && typeof bundle === 'object' && fk in bundle) {
            bundle = bundle[fk];
          } else {
            return key;
          }
        }
        break;
      }
    }

    if (typeof bundle === 'string' && Object.keys(params).length) {
      let result = bundle;
      for (const [p, v] of Object.entries(params)) {
        result = result.replace(`{{${p}}}`, v);
      }
      return result;
    }
    return typeof bundle === 'string' ? bundle : key;
  }, [language]);

  // –°–º–µ–Ω–∞ —è–∑—ã–∫–∞ + —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
  const setLanguage = useCallback(async (newLanguage) => {
    const normalized = normalizeLang(newLanguage);
    const finalLang = SUPPORTED.includes(normalized) ? normalized : 'en';

    if (isChanging || finalLang === language) return;

    console.log(`üîÑ Changing language: ${language} -> ${finalLang}`);
    setIsChanging(true);

    const prev = language;
    // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏
    setLanguageState(finalLang);
    setIsInitialized(true);
    setIsLoading(false);

    // –•–∞–ø—Ç–∏–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    window.Telegram?.WebApp?.HapticFeedback?.impactOccurred('light');

    try {
      // –í–∞–∂–Ω–æ: –∂–¥—ë–º –ë–î
      const result = await habitService.updateUserLanguage(finalLang);
      console.log('‚úÖ Language updated in DB:', result);
    } catch (err) {
      console.error('‚ùå Failed to update language in DB:', err);
      // –û—Ç–∫–∞—Ç
      setLanguageState(prev);
    } finally {
      setIsChanging(false);
    }
  }, [language, isChanging]);

  const value = {
    language,
    setLanguage,
    t,
    availableLanguages: SUPPORTED,
    isChanging,
    initializeLanguage,
    isLoading,
    isInitialized,
  };

  return (
    <LanguageContext.Provider value={value}>
      {children}
    </LanguageContext.Provider>
  );
};
