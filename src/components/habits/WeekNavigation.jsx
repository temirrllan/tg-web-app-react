import React, { useState, useEffect, useRef } from 'react';
import './WeekNavigation.css';

const WeekNavigation = ({ selectedDate, onDateSelect }) => {
  const [weekDates, setWeekDates] = useState([]);
  const scrollContainerRef = useRef(null);
  
  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
  const getWeekStart = (date) => {
    const d = new Date(date);
    const day = d.getDay();
    const diff = d.getDate() - day + (day === 0 ? -6 : 1); // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è
    const weekStart = new Date(d.setDate(diff));
    weekStart.setHours(12, 0, 0, 0); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–¥–µ–Ω—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
    return weekStart;
  };
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—ã —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
  const generateWeekDates = () => {
    const today = new Date();
    today.setHours(12, 0, 0, 0); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–¥–µ–Ω—å
    const weekStart = getWeekStart(today);
    const dates = [];
    
    for (let i = 0; i < 7; i++) {
      const date = new Date(weekStart);
      date.setDate(weekStart.getDate() + i);
      date.setHours(12, 0, 0, 0); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–¥–µ–Ω—å –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
      dates.push(date);
    }
    
    return dates;
  };
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É YYYY-MM-DD
  const formatDateString = (date) => {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  };
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const formatDate = (date) => {
    const today = new Date();
    today.setHours(12, 0, 0, 0);
    
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);
    
    const compareDate = new Date(date);
    compareDate.setHours(12, 0, 0, 0);
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—ã –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—é
    const dateStr = formatDateString(compareDate);
    const todayStr = formatDateString(today);
    const yesterdayStr = formatDateString(yesterday);
    const tomorrowStr = formatDateString(tomorrow);
    
    if (dateStr === todayStr) return 'Today';
    if (dateStr === yesterdayStr) return 'Yesterday';
    if (dateStr === tomorrowStr) return 'Tomorrow';
    
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–Ω–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ —á–∏—Å–ª–æ
    const dayName = compareDate.toLocaleDateString('en-US', { weekday: 'short' });
    const dayNumber = compareDate.getDate();
    return `${dayName} ${dayNumber}`;
  };
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å (—Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è –∏ –≤—á–µ—Ä–∞)
  const isEditableDate = (date) => {
    const today = new Date();
    today.setHours(12, 0, 0, 0);
    
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    
    const compareDate = new Date(date);
    compareDate.setHours(12, 0, 0, 0);
    
    const dateStr = formatDateString(compareDate);
    const todayStr = formatDateString(today);
    const yesterdayStr = formatDateString(yesterday);
    
    // –ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è –∏ –≤—á–µ—Ä–∞
    return dateStr === todayStr || dateStr === yesterdayStr;
  };
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–Ω—å –±—É–¥—É—â–∏–º
  const isFutureDate = (date) => {
    const today = new Date();
    today.setHours(12, 0, 0, 0);
    
    const compareDate = new Date(date);
    compareDate.setHours(12, 0, 0, 0);
    
    return compareDate > today;
  };
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–Ω—å –ø—Ä–æ—à–µ–¥—à–∏–º (–∫—Ä–æ–º–µ –≤—á–µ—Ä–∞)
  const isPastDate = (date) => {
    const today = new Date();
    today.setHours(12, 0, 0, 0);
    
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    
    const compareDate = new Date(date);
    compareDate.setHours(12, 0, 0, 0);
    
    // –ü—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏ - —ç—Ç–æ –≤—Å–µ –¥–Ω–∏ –¥–æ –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ (–Ω–µ –≤–∫–ª—é—á–∞—è –≤—á–µ—Ä–∞)
    return compareDate < yesterday;
  };
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–µ–ª–∏
  useEffect(() => {
    const dates = generateWeekDates();
    setWeekDates(dates);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–µ–¥–µ–ª—é –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
    const checkNewWeek = setInterval(() => {
      const now = new Date();
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
      if (now.getDay() === 1 && now.getHours() === 0 && now.getMinutes() < 1) {
        const newDates = generateWeekDates();
        setWeekDates(newDates);
        console.log('üìÖ New week started, updating dates');
      }
    }, 60000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    return () => clearInterval(checkNewWeek);
  }, []);
  
  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É –¥–Ω—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (scrollContainerRef.current && weekDates.length > 0) {
      const today = new Date();
      today.setHours(12, 0, 0, 0);
      const todayStr = formatDateString(today);
      
      const todayIndex = weekDates.findIndex(d => 
        formatDateString(d) === todayStr
      );
      
      if (todayIndex !== -1) {
        const scrollContainer = scrollContainerRef.current;
        const dayElements = scrollContainer.children;
        if (dayElements[todayIndex]) {
          setTimeout(() => {
            dayElements[todayIndex].scrollIntoView({ 
              behavior: 'smooth', 
              inline: 'center',
              block: 'nearest'
            });
          }, 100);
        }
      }
    }
  }, [weekDates]);
  
  const handleDateClick = (date) => {
    const dateStr = formatDateString(date);
    const isEditable = isEditableDate(date);
    
    console.log('Date selected:', dateStr, 'Editable:', isEditable);
    
    // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞—Ç—É –∏ —Ñ–ª–∞–≥ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    onDateSelect(dateStr, isEditable);
  };
  
  const isDateSelected = (date) => {
    return formatDateString(date) === selectedDate;
  };
  
  const isToday = (date) => {
    const today = new Date();
    today.setHours(12, 0, 0, 0);
    return formatDateString(date) === formatDateString(today);
  };
  
  const isYesterday = (date) => {
    const today = new Date();
    today.setHours(12, 0, 0, 0);
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    return formatDateString(date) === formatDateString(yesterday);
  };
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
  const getDayClasses = (date) => {
    const classes = ['week-navigation__day'];
    
    if (isDateSelected(date)) {
      classes.push('week-navigation__day--active');
    }
    
    if (isToday(date)) {
      classes.push('week-navigation__day--today');
    }
    
    if (isYesterday(date)) {
      classes.push('week-navigation__day--yesterday');
    }
    
    if (isPastDate(date)) {
      classes.push('week-navigation__day--past');
    }
    
    if (!isEditableDate(date) && !isFutureDate(date)) {
      classes.push('week-navigation__day--readonly');
    }
    
    return classes.join(' ');
  };
  
  // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –≤—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–µ –¥–∞—Ç—ã
  useEffect(() => {
    if (weekDates.length > 0) {
      console.log('Week dates:', weekDates.map(d => ({
        date: formatDateString(d),
        display: formatDate(d),
        isToday: isToday(d),
        isYesterday: isYesterday(d),
        isFuture: isFutureDate(d),
        isPast: isPastDate(d)
      })));
    }
  }, [weekDates]);
  
  return (
    <div className="week-navigation">
      <div className="week-navigation__scroll" ref={scrollContainerRef}>
        {weekDates.map((date, index) => (
          <button
            key={index}
            className={getDayClasses(date)}
            onClick={() => handleDateClick(date)}
          >
            <span className="week-navigation__day-label">
              {formatDate(date)}
            </span>
          </button>
        ))}
      </div>
    </div>
  );
};

export default WeekNavigation;