import api from './api';

export const telegramStarsService = {
  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å invoice –∏ –æ—Ç–∫—Ä—ã—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—É—é —Ñ–æ—Ä–º—É Telegram
  async purchaseSubscription(planType) {
    try {
      console.log('üí≥ Starting purchase for plan:', planType);

      const tg = window.Telegram?.WebApp;
      
      if (!tg) {
        throw new Error('Telegram WebApp not available');
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –ø–ª–∞–Ω–∞
      const planPrices = {
        '6_months': 1,
        '1_year': 1
      };
      
      const price = planPrices[planType];
      
      if (!price) {
        throw new Error('Invalid plan type');
      }

      console.log('üí∞ Plan price:', price, 'XTR');

      // –°–æ–∑–¥–∞—ë–º invoice payload –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
      const { data } = await api.post('/payment/request-invoice-button', { 
        planType 
      });

      if (!data.success) {
        throw new Error(data.error || 'Failed to create invoice');
      }

      console.log('‚úÖ Invoice created:', data.invoicePayload);

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const planNames = {
        '6_months': 'Premium for 6 Months',
        '1_year': 'Premium for 1 Year'
      };

      // –í–ê–ñ–ù–û: –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—É—é —Ñ–æ—Ä–º—É Telegram –Ω–∞–ø—Ä—è–º—É—é
      // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å Stars - –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ–π–¥–µ—Ç —Å—Ä–∞–∑—É
      // –ï—Å–ª–∏ –Ω–µ—Ç Stars - Telegram —Å–∞–º –ø–æ–∫–∞–∂–µ—Ç –∫–Ω–æ–ø–∫—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
      tg.openInvoice(
        // URL invoice –Ω–µ –Ω—É–∂–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ö–∞–Ω–∏–∑–º Telegram
        `https://t.me/$telegramBotName?start=invoice_${data.invoicePayload}`,
        (status) => {
          console.log('üí≥ Payment status:', status);
          
          if (status === 'paid') {
            console.log('‚úÖ Payment successful!');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (tg.showAlert) {
              tg.showAlert('üéâ Payment successful! Your Premium subscription is now active!');
            }
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
            window.dispatchEvent(new CustomEvent('payment_success'));
            
          } else if (status === 'cancelled') {
            console.log('‚ùå Payment cancelled by user');
          } else if (status === 'failed') {
            console.log('‚ùå Payment failed');
            
            if (tg.showAlert) {
              tg.showAlert('‚ùå Payment failed. Please try again.');
            }
          }
        }
      );

      return {
        success: true,
        message: 'Payment form opened',
        needsStars: false
      };

    } catch (error) {
      console.error('Purchase error:', error);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
      if (error.response?.status === 403) {
        throw new Error('bot_blocked');
      }
      
      throw error;
    }
  },

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
  async checkPaymentStatus(invoicePayload) {
    try {
      const { data } = await api.get(`/payment/check-status?payload=${invoicePayload}`);
      return data;
    } catch (error) {
      console.error('Check payment status error:', error);
      return null;
    }
  }
};