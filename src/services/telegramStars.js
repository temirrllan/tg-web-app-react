import api from './api';

export const telegramStarsService = {
  // –°–æ–∑–¥–∞—Ç—å invoice –∏ –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã
  async purchaseSubscription(planType) {
    try {
      console.log('üí≥ Starting purchase for plan:', planType);

      // 1. –ü–æ–ª—É—á–∞–µ–º invoice –¥–∞–Ω–Ω—ã–µ —Å backend
      const { data } = await api.post('/payment/create-invoice', { planType });

      if (!data.success) {
        throw new Error(data.error || 'Failed to create invoice');
      }

      const invoiceData = data.invoice;
      console.log('Invoice created:', invoiceData);

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram WebApp
      const tg = window.Telegram?.WebApp;
      if (!tg) {
        throw new Error('Telegram WebApp not available');
      }

      // 3. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ openInvoice
      // Telegram WebApp API —Ç—Ä–µ–±—É–µ—Ç URL –≤–º–µ—Å—Ç–æ payload
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è invoice
      const bot_username = '@trackeryourhabitbot'; // –ó–ê–ú–ï–ù–ò –ù–ê USERNAME –°–í–û–ï–ì–û –ë–û–¢–ê
      
      // –°–æ–∑–¥–∞—ë–º invoice link
      const invoiceLink = `https://t.me/${bot_username}?startattach=pay`;
      
      console.log('Opening invoice with link:', invoiceLink);

      // 4. –ü–†–ê–í–ò–õ–¨–ù–´–ô —Å–ø–æ—Å–æ–± –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Stars
      return new Promise((resolve, reject) => {
        const timeout = setTimeout(() => {
          reject(new Error('Payment timeout'));
        }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º sendData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ invoice payload
        try {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ
          tg.sendData(JSON.stringify({
            action: 'payment',
            payload: invoiceData.payload,
            amount: invoiceData.prices[0].amount,
            currency: invoiceData.currency,
            title: invoiceData.title,
            description: invoiceData.description
          }));

          clearTimeout(timeout);
          
          console.log('‚úÖ Payment initiated');
          resolve({
            success: true,
            payload: invoiceData.payload
          });

        } catch (error) {
          clearTimeout(timeout);
          console.error('Failed to send payment data:', error);
          reject(error);
        }
      });

    } catch (error) {
      console.error('Purchase error:', error);
      throw error;
    }
  },

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ backend
  async checkPaymentStatus(paymentId) {
    try {
      const { data } = await api.get(`/payment/status/${paymentId}`);
      return data;
    } catch (error) {
      console.error('Check payment status error:', error);
      return null;
    }
  },

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤—ë–∑–¥
  async checkStarsBalance() {
    const tg = window.Telegram?.WebApp;
    
    if (!tg) {
      return false;
    }

    return true;
  },

  // –û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∫—É–ø–∫–∏ Telegram Stars
  openStarsPurchase() {
    const tg = window.Telegram?.WebApp;
    
    if (tg && tg.openTelegramLink) {
      tg.openTelegramLink('https://t.me/donate');
    } else {
      window.open('https://t.me/donate', '_blank');
    }
  }
};