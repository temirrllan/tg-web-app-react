import api from './api';

export const telegramStarsService = {
  // –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ Telegram Stars
  async purchaseSubscription(planType) {
    try {
      console.log('üí≥ Starting purchase for plan:', planType);

      const tg = window.Telegram?.WebApp;
      
      if (!tg) {
        throw new Error('Telegram WebApp not available');
      }

      console.log('üìû Requesting invoice from backend...');

      // –°–æ–∑–¥–∞—ë–º invoice –Ω–∞ –±—ç–∫–µ–Ω–¥–µ –∏ –ø–æ–ª—É—á–∞–µ–º invoice URL
      const { data } = await api.post('/payment/create-invoice', { 
        planType 
      });

      if (!data.success) {
        throw new Error(data.error || 'Failed to create invoice');
      }

      console.log('‚úÖ Invoice created, URL:', data.invoiceUrl);

      // –í–ê–ñ–ù–û: –û—Ç–∫—Ä—ã–≤–∞–µ–º invoice —á–µ—Ä–µ–∑ Telegram WebApp
      // Telegram –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç –±–∞–ª–∞–Ω—Å Stars
      tg.openInvoice(data.invoiceUrl, (status) => {
        console.log('üí≥ Invoice status:', status);
        
        if (status === 'paid') {
          console.log('‚úÖ Payment successful!');
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
          if (tg.showAlert) {
            tg.showAlert('üéâ Payment successful! Your Premium subscription is now active!');
          }
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
          window.dispatchEvent(new CustomEvent('payment_success'));
          
        } else if (status === 'cancelled') {
          console.log('‚ùå Payment cancelled by user');
          
          if (tg.showAlert) {
            tg.showAlert('Payment was cancelled.');
          }
          
        } else if (status === 'failed') {
          console.log('‚ùå Payment failed');
          
          if (tg.showAlert) {
            tg.showAlert('‚ùå Payment failed. Please try again.');
          }
        } else if (status === 'pending') {
          console.log('‚è≥ Payment is pending');
        }
      });

      return {
        success: true,
        message: 'Invoice opened',
        needsStars: false
      };

    } catch (error) {
      console.error('Purchase error:', error);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
      if (error.response?.status === 403) {
        throw new Error('bot_blocked');
      }
      
      throw error;
    }
  },

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
  async checkPaymentStatus(invoicePayload) {
    try {
      const { data } = await api.get(`/payment/check-status?payload=${invoicePayload}`);
      return data;
    } catch (error) {
      console.error('Check payment status error:', error);
      return null;
    }
  }
};