import api from './api';

export const telegramStarsService = {
  // –°–æ–∑–¥–∞—Ç—å invoice –∏ –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã
  async purchaseSubscription(planType) {
    try {
      console.log('üí≥ Starting purchase for plan:', planType);

      // 1. –ü–æ–ª—É—á–∞–µ–º invoice –¥–∞–Ω–Ω—ã–µ —Å backend
      const { data } = await api.post('/payment/create-invoice', { planType });

      if (!data.success) {
        throw new Error(data.error || 'Failed to create invoice');
      }

      const invoiceData = data.invoice;
      console.log('Invoice created:', invoiceData);

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram WebApp
      const tg = window.Telegram?.WebApp;
      if (!tg) {
        throw new Error('Telegram WebApp not available');
      }

      // 3. –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã Telegram Stars
      return new Promise((resolve, reject) => {
        // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç –æ–ø–ª–∞—Ç—É
        const timeout = setTimeout(() => {
          reject(new Error('Payment timeout'));
        }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º invoice
        tg.openInvoice(invoiceData.payload, (status) => {
          clearTimeout(timeout);

          console.log('Payment status:', status);

          if (status === 'paid') {
            console.log('‚úÖ Payment successful');
            resolve({
              success: true,
              payload: invoiceData.payload
            });
          } else if (status === 'cancelled') {
            console.log('‚ùå Payment cancelled by user');
            reject(new Error('Payment cancelled'));
          } else if (status === 'failed') {
            console.log('‚ùå Payment failed');
            reject(new Error('Payment failed'));
          } else {
            console.log('‚ö†Ô∏è Unknown payment status:', status);
            reject(new Error('Unknown payment status'));
          }
        });
      });

    } catch (error) {
      console.error('Purchase error:', error);
      throw error;
    }
  },

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ backend
  async checkPaymentStatus(paymentId) {
    try {
      const { data } = await api.get(`/payment/status/${paymentId}`);
      return data;
    } catch (error) {
      console.error('Check payment status error:', error);
      return null;
    }
  },

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤—ë–∑–¥
  async checkStarsBalance() {
    const tg = window.Telegram?.WebApp;
    
    if (!tg) {
      return false;
    }

    // Telegram –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä—è–º–æ–≥–æ API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
    // –ù–æ –º—ã –º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à—ë–ª
    return true;
  },

  // –û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∫—É–ø–∫–∏ Telegram Stars
  openStarsPurchase() {
    const tg = window.Telegram?.WebApp;
    
    if (tg && tg.openTelegramLink) {
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞ @donate –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤—ë–∑–¥
      tg.openTelegramLink('https://t.me/donate');
    } else {
      window.open('https://t.me/donate', '_blank');
    }
  }
};