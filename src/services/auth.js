import api, { setAuthUser } from './api';

// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —è–∑—ã–∫ Telegram -> —Ç–æ–ª—å–∫–æ 'en' | 'ru' | 'kk', –∏–Ω–∞—á–µ 'en'
const normalizeLanguage = (code) => {
  if (!code) return 'en';
  const lc = String(code).toLowerCase();

  // –±—ã—Å—Ç—Ä—ã–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è
  if (lc === 'en' || lc === 'ru' || lc === 'kk') return lc;

  // –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏
  if (lc.startsWith('en')) return 'en';
  if (lc.startsWith('ru')) return 'ru';
  if (lc.startsWith('kk')) return 'kk';

  // –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
  return 'en';
};

export const authenticateUser = async (initData, user) => {
  try {
    console.log('üîê Starting authentication...');
    console.log('üì± Telegram user data:', user);
    console.log('üåê language_code from Telegram:', user?.language_code);

    const isProduction = window.location.hostname !== 'localhost';

    // –í production ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram
    if (isProduction) {
      if (!initData || !user || !user.id) {
        throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram');
      }
      console.log('‚úÖ Production mode - using real Telegram data');
    } else {
      // –í dev ‚Äî –ø–æ–¥—Å—Ç–∞–≤–∏–º –º–æ–∫, –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö
      if (!user || !user.id) {
        console.log('‚ö†Ô∏è Development mode - using mock data');
        user = {
          id: 123456789,
          first_name: 'Test',
          last_name: 'User',
          username: 'testuser',
          language_code: 'en'
        };
      }
      initData = initData || 'test_init_data';
    }

    // –ö–†–ò–¢–ò–ß–ù–û: –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —è–∑—ã–∫ –∏–∑ Telegram –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ ('en'|'ru'|'kk'), –∏–Ω–∞—á–µ 'en'
    const normalizedLang = normalizeLanguage(user?.language_code);

    // –ì–æ—Ç–æ–≤–∏–º –ø–æ–ª–µ–∑–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –¥–ª—è –±—ç–∫–∞
    const userDataToSend = {
      id: user.id,
      first_name: user.first_name,
      last_name: user.last_name,
      username: user.username,
      // –≤–∞–∂–Ω–æ: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —è–∑—ã–∫
      language_code: normalizedLang,
      is_premium: user.is_premium,
      photo_url: user.photo_url
    };

    console.log('üì§ Sending to server:', {
      ...userDataToSend,
      language_code: userDataToSend.language_code || 'NOT SET!'
    });

    const response = await api.post('/auth/telegram', {
      initData,
      user: userDataToSend
    });

    console.log('üì• Server response:', {
      success: response.data.success,
      user_id: response.data.user?.id,
      user_language: response.data.user?.language,
      isNewUser: response.data.isNewUser
    });

    if (response.data.success && response.data.user) {
      // –ù–∞ —Ñ—Ä–æ–Ω—Ç–µ —Ö—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ api-–∫–ª–∏–µ–Ω—Ç–∞
      setAuthUser(response.data.user);

      // üö´ –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ localStorage
      // –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ: —è–∑—ã–∫ —Ç—è–Ω–µ—Ç—Å—è –∏–∑ –ë–î, –∞ –Ω–µ –∏–∑ LS –∏–ª–∏ Telegram –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞

      console.log(`‚úÖ Authentication successful. User language (from DB): ${response.data.user.language}`);
    }

    return response.data;
  } catch (error) {
    console.error('‚ùå Auth error:', error);
    console.error('Error details:', error.response?.data);

    if (error.response?.status === 403) {
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ Telegram');
    } else if (error.response?.status === 401) {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram');
    }

    throw error;
  }
};
