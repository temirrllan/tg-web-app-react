// src/services/auth.js
import api, { setAuthUser } from './api';

export const authenticateUser = async (initData, user) => {
  try {
    const isProduction = window.location.hostname !== 'localhost';
    
    console.log('üîç DEBUG: Auth started');
    console.log('üîç DEBUG: Telegram user data:', user);
    console.log('üîç DEBUG: Language from Telegram:', user?.language_code);
    
    // –í production –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram
    if (isProduction) {
      if (!initData || !user || !user.id) {
        throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram');
      }
    } else {
      // Development mode - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö
      initData = initData || 'test_init_data';
      user = user || {
        id: 123456789,
        first_name: 'Test',
        last_name: 'User',
        username: 'testuser',
        language_code: 'en' // –í dev —Ä–µ–∂–∏–º–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
      };
      console.log('üîç DEBUG: Dev mode, using test user with language:', user.language_code);
    }

    console.log('üîç DEBUG: Sending auth request with user:', {
      id: user.id,
      language_code: user.language_code,
      first_name: user.first_name
    });

    const response = await api.post('/auth/telegram', {
      initData,
      user
    });

    console.log('üîç DEBUG: Auth response received:', response.data);
    console.log('üîç DEBUG: User language from server:', response.data.user?.language);

    if (response.data.success && response.data.user) {
      setAuthUser(response.data.user);
      
      // –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userLanguage = response.data.user.language;
      console.log('üîç DEBUG: User language to be used:', userLanguage);
      
      // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
      // localStorage —É–¥–∞–ª–µ–Ω –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ
    }

    return response.data;
  } catch (error) {
    console.error('Auth error:', error);
    console.error('üîç DEBUG: Auth error details:', error.response?.data);
    
    // –ë–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
    if (error.response?.status === 403) {
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ Telegram');
    } else if (error.response?.status === 401) {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram');
    }
    
    throw error;
  }
};